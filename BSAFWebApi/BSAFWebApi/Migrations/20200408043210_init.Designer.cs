// <auto-generated />
using System;
using BSAFWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BSAFWebApi.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20200408043210_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BSAF.Models.Beneficiary", b =>
                {
                    b.Property<int>("BeneficiaryID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllowForJob");

                    b.Property<int?>("BeforReturnDistrictID");

                    b.Property<int?>("BeforReturnProvince");

                    b.Property<string>("BeforReturnRemarks");

                    b.Property<string>("BeneficiaryType");

                    b.Property<string>("BorderPoint");

                    b.Property<string>("CountryOfExilOther");

                    b.Property<string>("CountryOfExile");

                    b.Property<bool?>("DidChildrenGoToSchoole");

                    b.Property<bool?>("DoHaveSecureLivelihood");

                    b.Property<bool?>("FamilyMemStayedBehind");

                    b.Property<int?>("FamilyMemStayedBehindNo");

                    b.Property<Guid>("GUID");

                    b.Property<bool?>("HaveFamilyBenefited");

                    b.Property<bool?>("HoHCanReadWrite");

                    b.Property<string>("HoHEducationLevel");

                    b.Property<string>("HoHEducationLevelOther");

                    b.Property<string>("InsertedBy");

                    b.Property<DateTime>("InsertedDate");

                    b.Property<string>("IntendToDo");

                    b.Property<string>("IntendToReturnToHostReason");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsCardIssued");

                    b.Property<bool>("IsSubmitted");

                    b.Property<string>("LastUpdatedBy");

                    b.Property<DateTime?>("LastUpdatedDate");

                    b.Property<string>("LeavingReason1");

                    b.Property<string>("LeavingReason1Other");

                    b.Property<string>("LeavingReason2");

                    b.Property<string>("LeavingReason2Other");

                    b.Property<string>("LeavingReason3");

                    b.Property<string>("LeavingReason3Other");

                    b.Property<int?>("LengthOfStayDays");

                    b.Property<int?>("LengthOfStayMonths");

                    b.Property<int?>("LengthOfStayYears");

                    b.Property<int?>("NumChildrenAttendedSchoole");

                    b.Property<int?>("NumHHHaveDocOther");

                    b.Property<int?>("NumHHHavePassport");

                    b.Property<int?>("NumHHHaveTaskira");

                    b.Property<int?>("OriginDistrict");

                    b.Property<string>("OriginProvince");

                    b.Property<string>("OriginVillage");

                    b.Property<bool?>("OwnHouse");

                    b.Property<string>("ProfessionInHostCountry");

                    b.Property<string>("ProfessionInHostCountryOther");

                    b.Property<string>("ProvinceBCP");

                    b.Property<string>("RentPayCurrency");

                    b.Property<int?>("RentPayForAccom");

                    b.Property<int?>("ReturnDistrict");

                    b.Property<string>("ReturnProvince");

                    b.Property<string>("ReturnStatus");

                    b.Property<string>("ReturnVillage");

                    b.Property<DateTime>("ScreeningDate");

                    b.Property<string>("TopNeed1");

                    b.Property<string>("TopNeed1Other");

                    b.Property<string>("TopNeed2");

                    b.Property<string>("TopNeed2Other");

                    b.Property<string>("TopNeed3");

                    b.Property<string>("TopNeed3Other");

                    b.Property<string>("TransportAccomByNo");

                    b.Property<string>("TransportAccompaniedBy");

                    b.Property<DateTime>("TransportationDate");

                    b.Property<string>("TransportationInfo");

                    b.Property<string>("WhereWillLive");

                    b.Property<bool?>("WouldYouReturn");

                    b.HasKey("BeneficiaryID");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("BSAF.Models.BenefitedFromOrg", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AssistanceProvided");

                    b.Property<int>("BeneficiaryID");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("DistrictID");

                    b.Property<string>("OrgCode")
                        .IsRequired();

                    b.Property<string>("ProvinceCode");

                    b.Property<string>("Village");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("BenefitedFromOrgs");
                });

            modelBuilder.Entity("BSAF.Models.BorderCrossingPoint", b =>
                {
                    b.Property<int>("BCPId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BCPCode");

                    b.Property<string>("DistrictCode");

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("NeighCountryCode");

                    b.Property<string>("PaName");

                    b.Property<string>("ProvinceCode");

                    b.Property<int>("VillageId");

                    b.HasKey("BCPId");

                    b.ToTable("BorderCrossingPoints");
                });

            modelBuilder.Entity("BSAF.Models.BroughtItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("ItemCode");

                    b.Property<string>("ItemOther");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("BroughtItems");
                });

            modelBuilder.Entity("BSAF.Models.Determination", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AnswerCode");

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("DeterminationCode");

                    b.Property<string>("Other");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("Determinations");
                });

            modelBuilder.Entity("BSAF.Models.District", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DistrictCode");

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaName");

                    b.Property<string>("ProvinceCode");

                    b.HasKey("DistrictId");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("BSAF.Models.HostCountryDistrict", b =>
                {
                    b.Property<int>("DistrictId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaName");

                    b.Property<int>("ProvinceId");

                    b.HasKey("DistrictId");

                    b.ToTable("HostCountryDistricts");
                });

            modelBuilder.Entity("BSAF.Models.HostCountryProvince", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryCode");

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("PaName");

                    b.HasKey("ProvinceId");

                    b.ToTable("HostCountryProvinces");
                });

            modelBuilder.Entity("BSAF.Models.HostCountrySchool", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiaryID");

                    b.Property<string>("SchoolTypeCode")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("HostCountrySchool");
                });

            modelBuilder.Entity("BSAF.Models.Individual", b =>
                {
                    b.Property<int>("IndividualID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Age");

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("ContactNumber");

                    b.Property<string>("DrFName");

                    b.Property<string>("DrName");

                    b.Property<string>("FName");

                    b.Property<string>("GenderCode");

                    b.Property<string>("IDNo");

                    b.Property<string>("IDTypeCode");

                    b.Property<string>("MaritalStatusCode");

                    b.Property<string>("Name");

                    b.Property<string>("RelationshipCode");

                    b.HasKey("IndividualID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("Individuals");
                });

            modelBuilder.Entity("BSAF.Models.LivelihoodEmpNeed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiaryID");

                    b.Property<string>("NeedCode")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("LivelihoodEmpNeeds");
                });

            modelBuilder.Entity("BSAF.Models.LookupType", b =>
                {
                    b.Property<int>("LookupId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LookupCode");

                    b.Property<string>("PaName");

                    b.HasKey("LookupId");

                    b.ToTable("LookupTypes");
                });

            modelBuilder.Entity("BSAF.Models.LookupValue", b =>
                {
                    b.Property<int>("ValueId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LookupCode");

                    b.Property<string>("PaName");

                    b.Property<string>("ValueCode");

                    b.HasKey("ValueId");

                    b.ToTable("LookupValues");
                });

            modelBuilder.Entity("BSAF.Models.MainConcern", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiaryID");

                    b.Property<string>("ConcernCode")
                        .IsRequired();

                    b.Property<string>("Other");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("MainConcerns");
                });

            modelBuilder.Entity("BSAF.Models.MoneySource", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("MoneySourceCode");

                    b.Property<string>("MoneySourceOther");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("MoneySources");
                });

            modelBuilder.Entity("BSAF.Models.NeedTool", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiaryID");

                    b.Property<string>("Other");

                    b.Property<string>("ToolCode")
                        .IsRequired();

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("NeedTools");
                });

            modelBuilder.Entity("BSAF.Models.PostArrivalNeed", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("Comment");

                    b.Property<string>("NeedCode");

                    b.Property<bool?>("Provided");

                    b.Property<DateTime>("ProvidedDate");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("PostArrivalNeeds");
                });

            modelBuilder.Entity("BSAF.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("DrName");

                    b.Property<string>("EnName");

                    b.Property<bool>("IsActive");

                    b.Property<string>("MapCode");

                    b.Property<string>("PaName");

                    b.Property<string>("ProvinceCode");

                    b.HasKey("ProvinceId");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("BSAF.Models.PSN", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("PSNCode");

                    b.Property<string>("PSNOther");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("PSN");
                });

            modelBuilder.Entity("BSAF.Models.ReturnReason", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BeneficiaryID");

                    b.Property<string>("Other");

                    b.Property<string>("ReasonCode");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("ReturnReasons");
                });

            modelBuilder.Entity("BSAF.Models.Transportation", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BeneficiaryID");

                    b.Property<string>("Other");

                    b.Property<string>("TypedCode");

                    b.HasKey("ID");

                    b.HasIndex("BeneficiaryID");

                    b.ToTable("Transportations");
                });

            modelBuilder.Entity("BSAFWebApi.Models.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BSAFWebApi.Models.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastActive");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("StationCode");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BSAFWebApi.Models.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.Property<int?>("RoleId1");

                    b.Property<int?>("UserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("RoleId1");

                    b.HasIndex("UserId1");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BSAF.Models.BenefitedFromOrg", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("BenefitedFromOrgs")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.BroughtItem", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("BroughtItems")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.Determination", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("Determinations")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.HostCountrySchool", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("HostCountrySchools")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.Individual", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("Individuals")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.LivelihoodEmpNeed", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("LivelihoodEmpNeeds")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.MainConcern", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("MainConcerns")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.MoneySource", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("MoneySources")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.NeedTool", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("NeedTools")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.PostArrivalNeed", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("PostArrivalNeed")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.Province", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.PSN", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("PSNs")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAF.Models.ReturnReason", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("ReturnReasons")
                        .HasForeignKey("BeneficiaryID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BSAF.Models.Transportation", b =>
                {
                    b.HasOne("BSAF.Models.Beneficiary", "Beneficiary")
                        .WithMany("Transportations")
                        .HasForeignKey("BeneficiaryID");
                });

            modelBuilder.Entity("BSAFWebApi.Models.Identity.UserRole", b =>
                {
                    b.HasOne("BSAFWebApi.Models.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BSAFWebApi.Models.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId1");

                    b.HasOne("BSAFWebApi.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BSAFWebApi.Models.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("BSAFWebApi.Models.Identity.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("BSAFWebApi.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("BSAFWebApi.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("BSAFWebApi.Models.Identity.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
